// --- Functions to generate email content ---

export const generateEmailBodyText = (insight: any, fullReportUrl?: string, recipientName?: string) => {
    const { company_name, analysis_result } = insight;
    
    // Handle case where analysis_result is undefined (analysis failed)
    if (!analysis_result) {
        return `Error: Analysis failed for ${company_name}. Please try uploading the PDF again.`;
    }
    
    const { report_metadata, categories, recommendations } = analysis_result;
    
    // Handle case where report_metadata is undefined
    if (!report_metadata) {
        return `Error: Invalid analysis data for ${company_name}. Please try uploading the PDF again.`;
    }
    
    const { humanized_intro, reporting_period_start, reporting_period_end } = report_metadata;

    let body = "";
    if (recipientName) {
        body += `Hi ${recipientName},\n\nHere is your weekly network analysis report.\n\n`;
    }

    body += "Weekly Report Header\n";
    body += "Hi Larry,\n\n";
    body += "Here is your weekly network analysis report.\n\n";
    body += `📁 Source: ${company_name}\n`;
    body += `📅 Period: ${reporting_period_start} to ${reporting_period_end}\n`;
    if (fullReportUrl) {
        body += `📊 View Full Report Online\n\n`;
    }

    body += "🎯 Executive Summary\n\n";
    body += `${humanized_intro}\n\n`;

    // Add dashboard summary
    const totalEvents = categories.reduce((sum: number, cat: any) => 
        sum + cat.findings.reduce((catSum: number, f: any) => catSum + (f.total_occurrences || 0), 0), 0);
    
    body += "Executive Summary Dashboard\n";
    body += "Executive Summary Dashboard\n\n";

    body += "📊 Event Occurrences by Category\n";
    categories.forEach((cat: any) => {
        const totalOccurrences = cat.findings.reduce((sum: number, f: any) => sum + (f.total_occurrences || 0), 0);
        const categoryName = cat.category_name.replace(/ Events| Issues| \/ WLAN| \/ Port Errors/g, '').replace('Unreachable Site Events', 'Unreachable Site');
        body += `${categoryName}\n${totalOccurrences}\n`;
    });

    // Severity distribution
    const severityCounts = categories.flatMap((c: any) => c.findings).reduce((acc: any, f: any) => {
        acc[f.severity] = (acc[f.severity] || 0) + (f.total_occurrences || 0);
        return acc;
    }, {});
    
    body += "\n🎯 Issue Severity Distribution\n";
    Object.entries(severityCounts).forEach(([severity, count]: [string, any]) => {
        const percentage = ((count / totalEvents) * 100).toFixed(1);
        body += `${severity.replace(/_/g, ' ')}\t${count} (${percentage}%)\n`;
    });

    // Trend analysis
    const trendCounts = categories.flatMap((c: any) => c.findings).reduce((acc: any, f: any) => {
        acc[f.trend] = (acc[f.trend] || 0) + 1;
        return acc;
    }, {});
    
    body += "\n📈 Issue Trend Analysis\n";
    Object.entries(trendCounts).forEach(([trend, count]: [string, any]) => {
        const emoji = trend === 'worsening_trend' ? '↗️' : trend === 'stable_trend' ? '➡️' : '↘️';
        const trendName = trend === 'worsening_trend' ? 'Worsening' : trend === 'stable_trend' ? 'Stable' : 'Improving';
        body += `${emoji}\n${count}\n${trendName}\n`;
    });

    body += "\n";

    // Categories with findings
    categories.forEach((cat: any) => {
        body += `${cat.category_name}\n`;
        cat.findings.forEach((finding: any) => {
            body += `${finding.summary_line}\n\n`;
            body += `${finding.severity.replace(/_/g, ' ')} Trend: `;
            if (finding.trend === 'worsening_trend') {
                body += "↗️ worsening trend\n";
            } else if (finding.trend === 'stable_trend') {
                body += "➡️ stable trend\n";
            } else if (finding.trend === 'improving_trend') {
                body += "↘️ improving trend\n";
            } else {
                body += "❔ n/a\n";
            }
            body += "\n";
        });
        body += `${cat.category_name} Analysis Chart\n`;
        body += `${cat.category_name} Analysis Visualization\n\n`;
    });

    body += "💡 Recommendations\n";
    if (recommendations && recommendations.length > 0) {
        recommendations.forEach((rec: string) => {
            body += `• ${rec}\n`;
        });
    } else {
        body += "No specific recommendations generated.\n";
    }

    body += "\nGenerated by NetOp Customer Success Team";

    return body;
};

// Create CSS-based charts for email compatibility
const createEmailCharts = (analysis_result: any) => {
    const { categories } = analysis_result;
    
    const occurrencesByCategory = categories
        .map((cat: any) => ({
            name: cat.category_name.replace(/ Events| Issues| \/ WLAN| \/ Port Errors/g, '').replace('Unreachable Site Events', 'Unreachable'),
            occurrences: cat.findings.reduce((sum: number, f: any) => sum + (f.total_occurrences || 0), 0)
        }))
        .filter((cat: any) => cat.occurrences > 0);

    const severityDistribution = categories
        .flatMap((c: any) => c.findings)
        .filter((f: any) => f.total_occurrences > 0)
        .reduce((acc: any, finding: any) => {
            acc[finding.severity] = (acc[finding.severity] || 0) + finding.total_occurrences;
            return acc;
        }, {});

    const maxOccurrences = Math.max(...occurrencesByCategory.map((cat: any) => cat.occurrences));
    const safeMaxOccurrences = maxOccurrences > 0 ? maxOccurrences : 1; 
    const totalSeverityEvents = Object.values(severityDistribution).reduce((sum: number, val: any) => sum + val, 0);

    const barChartHTML = occurrencesByCategory.length > 0 ? `
        <div style="background: #ffffff; border: 1px solid #e2e8f0; border-radius: 8px; padding: 20px; margin: 20px 0;">
            <h3 style="font-size: 16px; font-weight: 600; color: #374151; margin-bottom: 16px; text-align: center;">📊 Event Occurrences by Category</h3>
            <div style="space-y: 8px;">
                ${occurrencesByCategory.map((cat: any) => {
                    const percentage = (cat.occurrences / safeMaxOccurrences) * 100;
                    return `
                        <div style="margin-bottom: 8px;">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 4px;">
                                <span style="font-size: 14px; font-weight: 500; color: #374151;">${cat.name}</span>
                                <span style="font-size: 14px; font-weight: 600; color: #1f2937;">${cat.occurrences.toLocaleString()}</span>
                            </div>
                            <div style="background-color: #f3f4f6; border-radius: 4px; height: 8px; overflow: hidden;">
                                <div style="background-color: #3b82f6; height: 100%; width: ${percentage}%; transition: width 0.3s ease;"></div>
                            </div>
                        </div>
                    `;
                }).join('')}
            </div>
        </div>
    ` : '';

    const severityColors = {
        major_issue: '#ef4444',
        recurring_issue: '#f97316', 
        notable: '#3b82f6',
        minor_issue: '#10b981',
        informational: '#60a5fa',
    };

    const severityData = Object.entries(severityDistribution)
        .filter(([name]) => severityColors[name as keyof typeof severityColors])
        .map(([name, value]) => ({ name, value, percentage: (value as number / totalSeverityEvents) * 100 }));

    let currentAngle = 0;
    const conicGradientSegments = severityData.map((item: any) => {
        const startAngle = currentAngle;
        const endAngle = currentAngle + (item.percentage * 3.6);
        currentAngle = endAngle;
        return `${severityColors[item.name as keyof typeof severityColors]} ${startAngle}deg ${endAngle}deg`;
    }).join(', ');

    const pieChartHTML = severityData.length > 0 ? `
        <div style="background: #ffffff; border: 1px solid #e2e8f0; border-radius: 8px; padding: 20px; margin: 20px 0;">
            <h3 style="font-size: 16px; font-weight: 600; color: #374151; margin-bottom: 16px; text-align: center;">🎯 Issue Severity Distribution</h3>
            <table width="100%" cellpadding="0" cellspacing="0" border="0">
                <tr>
                    <td width="120" valign="top" style="padding-right: 20px;">
                       <div style="width: 120px; height: 120px; border-radius: 50%; background: conic-gradient(${conicGradientSegments});"></div>
                    </td>
                    <td valign="middle">
                        <table width="100%" cellpadding="0" cellspacing="0" border="0">
                            ${severityData.map((item: any) => `
                                <tr>
                                    <td style="padding-bottom: 8px;">
                                        <table width="100%" cellpadding="0" cellspacing="0" border="0">
                                            <tr>
                                                <td style="width: 12px; padding-right: 8px;"><div style="width: 12px; height: 12px; background-color: ${severityColors[item.name as keyof typeof severityColors]}; border-radius: 50%;"></div></td>
                                                <td><span style="font-size: 14px; color: #374151; text-transform: capitalize;">${item.name.replace(/_/g, ' ')}</span></td>
                                                <td style="text-align: right;"><span style="font-weight: 600; color: #1f2937;">${item.value.toLocaleString()} (${item.percentage.toFixed(1)}%)</span></td>
                                            </tr>
                                        </table>
                                    </td>
                                </tr>
                            `).join('')}
                        </table>
                    </td>
                </tr>
            </table>
        </div>
    ` : '';

    const trendData = categories
        .flatMap((c: any) => c.findings)
        .filter((f: any) => f.total_occurrences > 0)
        .reduce((acc: any, finding: any) => {
            acc[finding.trend] = (acc[finding.trend] || 0) + 1;
            return acc;
        }, {});

    const trendHTML = Object.keys(trendData).length > 0 ? `
        <div style="background: #ffffff; border: 1px solid #e2e8f0; border-radius: 8px; padding: 20px; margin: 20px 0;">
            <h3 style="font-size: 16px; font-weight: 600; color: #374151; margin-bottom: 16px; text-align: center;">📈 Issue Trend Analysis</h3>
            <table width="100%" cellpadding="0" cellspacing="0" border="0">
                <tr>
                ${trendData.worsening_trend ? `
                    <td align="center" style="padding: 12px;">
                        <div style="font-size: 24px; color: #ef4444;">↗️</div>
                        <div style="font-weight: 600; color: #ef4444;">${trendData.worsening_trend}</div>
                        <div style="font-size: 12px; color: #6b7280;">Worsening</div>
                    </td>
                ` : ''}
                ${trendData.stable_trend ? `
                    <td align="center" style="padding: 12px;">
                        <div style="font-size: 24px; color: #6b7280;">➡️</div>
                        <div style="font-weight: 600; color: #6b7280;">${trendData.stable_trend}</div>
                        <div style="font-size: 12px; color: #6b7280;">Stable</div>
                    </td>
                ` : ''}
                ${trendData.improving_trend ? `
                    <td align="center" style="padding: 12px;">
                        <div style="font-size: 24px; color: #10b981;">↘️</div>
                        <div style="font-weight: 600; color: #10b981;">${trendData.improving_trend}</div>
                        <div style="font-size: 12px; color: #6b7280;">Improving</div>
                    </td>
                ` : ''}
                </tr>
            </table>
        </div>
    ` : '';

    return barChartHTML + pieChartHTML + trendHTML;
};

export const generateEmailBodyHTML = (insight: any, fullReportUrl?: string, recipientName?: string, categoryVisuals?: any[]) => {
    const { analysis_result, company_name } = insight;
    
    // Handle case where analysis_result is undefined (analysis failed)
    if (!analysis_result) {
        return `
        <!DOCTYPE html>
        <html>
        <head>
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        </head>
        <body style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; background-color: #f8fafc; color: #1e293b; margin: 0; padding: 20px;">
            <div style="max-width: 680px; margin: 0 auto; background-color: #ffffff; border-radius: 8px; padding: 24px; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);">
                <h2 style="color: #dc2626;">❌ Analysis Failed</h2>
                <p>Error: Analysis failed for ${company_name}. Please try uploading the PDF again.</p>
            </div>
        </body>
        </html>`;
    }
    
    // Extract data from analysis_result
    const { report_metadata, categories, recommendations } = analysis_result;
    
    // Handle case where report_metadata is undefined
    if (!report_metadata) {
        return `
        <!DOCTYPE html>
        <html>
        <head>
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        </head>
        <body style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; background-color: #f8fafc; color: #1e293b; margin: 0; padding: 20px;">
            <div style="max-width: 680px; margin: 0 auto; background-color: #ffffff; border-radius: 8px; padding: 24px; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);">
                <h2 style="color: #dc2626;">❌ Invalid Analysis Data</h2>
                <p>Error: Invalid analysis data for ${company_name}. Please try uploading the PDF again.</p>
            </div>
        </body>
        </html>`;
    }

    const styles = {
        body: `font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; background-color: #f8fafc; color: #1e293b; margin: 0; padding: 0;`,
        container: `max-width: 680px; margin: 0 auto; background-color: #ffffff; border-radius: 8px; overflow: hidden; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);`,
        headerImage: `width: 100%; height: auto; display: block; border-radius: 8px 8px 0 0;`,
        content: `padding: 24px;`,
        metaInfo: `background-color: #f8fafc; padding: 16px; border-radius: 6px; margin-bottom: 24px; font-size: 14px; color: #475569;`,
        sectionTitle: `font-size: 20px; font-weight: 600; color: #0f172a; border-bottom: 2px solid #e2e8f0; padding-bottom: 8px; margin-bottom: 16px; margin-top: 32px;`,
        executiveSummary: `background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%); border-left: 4px solid #3b82f6; color: #1e3a8a; padding: 20px; margin-bottom: 24px; border-radius: 0 8px 8px 0; box-shadow: 0 2px 4px rgba(59, 130, 246, 0.1);`,
        findingItem: `border: 1px solid #e2e8f0; border-radius: 8px; padding: 16px; margin-bottom: 12px; background: #ffffff; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);`,
        findingSummary: `font-size: 16px; color: #1e293b; margin: 0; line-height: 1.5;`,
        findingDetails: `font-size: 14px; color: #64748b; margin-top: 8px;`,
        badge: `display: inline-block; padding: 4px 12px; border-radius: 9999px; font-size: 12px; font-weight: 600; text-transform: capitalize; margin-right: 8px;`,
        severity: {
            major_issue: 'background-color: #fee2e2; color: #b91c1c; border: 1px solid #fecaca;',
            recurring_issue: 'background-color: #ffedd5; color: #c2410c; border: 1px solid #fed7aa;',
            notable: 'background-color: #dbeafe; color: #1d4ed8; border: 1px solid #bfdbfe;',
            minor_issue: 'background-color: #d1fae5; color: #065f46; border: 1px solid #a7f3d0;',
            informational: 'background-color: #e0f2fe; color: #0c4a6e; border: 1px solid #bae6fd;'
        },
        recommendationList: `list-style-type: none; padding: 0; margin: 0;`,
        recommendationItem: `background: #f8fafc; border-left: 3px solid #3b82f6; padding: 12px 16px; margin-bottom: 8px; border-radius: 0 6px 6px 0;`,
        footer: `text-align: center; padding: 24px; font-size: 12px; color: #64748b; background-color: #f8fafc; border-top: 1px solid #e2e8f0;`,
    };
    
    const greetingHTML = recipientName 
        ? `<p style="font-size: 16px; color: #374151; margin-bottom: 24px; line-height: 1.6;">Hi ${recipientName},<br><br>Here is your weekly network analysis report.</p>`
        : '';

    const fullReportButtonHTML = fullReportUrl ? `
        <div style="text-align: center; margin: 24px 0;">
            <a href="${fullReportUrl}" target="_blank" style="display: inline-block; background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%); color: #ffffff; padding: 14px 28px; text-decoration: none; border-radius: 8px; font-size: 16px; font-weight: 600; box-shadow: 0 4px 6px -1px rgba(59, 130, 246, 0.3); transition: all 0.2s ease;">📊 View Full Report Online</a>
        </div>
    ` : '';

    const getFindingHTML = (finding: any) => {
        const sevStyle = styles.severity[finding.severity as keyof typeof styles.severity] || styles.severity.notable;
        const trendIcon = finding.trend === 'improving_trend' ? '↘️' : 
                          finding.trend === 'worsening_trend' ? '↗️' : 
                          finding.trend === 'stable_trend' ? '➡️' : '❔';
        
        // Add business hours flag if the event affects business hours
        const businessHoursFlag = finding.business_hours_impact === 'YES' ? 
            `<span style="background: #dc2626; color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: 600; margin-right: 8px;">🕐 AFFECTING BUSINESS HOURS</span>` : '';
        
        // Create detailed event information
        const eventDetails = [];
        if (finding.total_occurrences) eventDetails.push(`<strong>Occurrences:</strong> ${finding.total_occurrences}`);
        if (finding.avg_duration_minutes) eventDetails.push(`<strong>Avg Duration:</strong> ${finding.avg_duration_minutes}min`);
        if (finding.last_occurrence) eventDetails.push(`<strong>Last Occurrence:</strong> ${finding.last_occurrence}`);
        
        // Add specific details for different event types
        if (finding.impacted_clients) eventDetails.push(`<strong>Impacted Clients:</strong> ${finding.impacted_clients}`);
        if (finding.error_type) eventDetails.push(`<strong>Error Type:</strong> ${finding.error_type}`);
        if (finding.utilization_percentage) eventDetails.push(`<strong>Utilization:</strong> ${finding.utilization_percentage}%`);
        if (finding.affected_services) eventDetails.push(`<strong>Affected Services:</strong> ${finding.affected_services}`);
        
        const detailsHTML = eventDetails.length > 0 ? 
            `<div style="margin-top: 8px; font-size: 12px; color: #6b7280;">
                ${eventDetails.join(' • ')}
            </div>` : '';
        
        return `
            <div style="${styles.findingItem}">
                <p style="${styles.findingSummary}">${finding.summary_line}</p>
                <p style="${styles.findingDetails}">
                    ${businessHoursFlag}
                    <span style="${styles.badge} ${sevStyle}">${finding.severity.replace(/_/g, ' ')}</span>
                    <span style="color: #6b7280;">Trend: ${trendIcon} ${finding.trend.replace(/_/g, ' ')}</span>
                </p>
                ${detailsHTML}
            </div>
        `;
    };

    const getCategoryHTML = (category: any) => {
        // Find the visual for this category
        const categoryVisual = categoryVisuals ? categoryVisuals.find((visual: any) => 
            visual.categoryName === category.category_name
        ) : null;
        
        const visualHTML = categoryVisual && categoryVisual.variations && categoryVisual.variations[categoryVisual.selectedVariation] ? `
            <div style="text-align: center; margin: 20px 0; padding: 16px; background: #f8fafc; border-radius: 8px;">
                <h4 style="margin: 0 0 12px 0; color: #374151; font-size: 16px;">📊 ${category.category_name} Visualization</h4>
                <img src="${categoryVisual.variations[categoryVisual.selectedVariation].imageUrl}" 
                     alt="${category.category_name} chart" 
                     style="max-width: 100%; height: auto; border-radius: 6px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);" />
                <p style="margin: 8px 0 0 0; font-size: 12px; color: #6b7280;">
                    ${categoryVisual.variations[categoryVisual.selectedVariation].chartType} Chart - ${categoryVisual.variations[categoryVisual.selectedVariation].style} Style
                </p>
            </div>
        ` : '';
        
        if (category.findings.length === 1 && category.findings[0].summary_line.includes("Stability observed")) {
            return `
                <div>
                    <h3 style="${styles.sectionTitle}">${category.category_name}</h3>
                    <div style="background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%); color: #166534; padding: 16px; border-radius: 8px; border-left: 4px solid #22c55e;">
                        ✅ ${category.findings[0].summary_line}
                    </div>
                    ${visualHTML}
                </div>
            `;
        }
        return `
            <div>
                <h3 style="${styles.sectionTitle}">${category.category_name}</h3>
                ${category.findings.map(getFindingHTML).join('')}
                ${visualHTML}
            </div>
        `;
    };

    const recommendationsHtml = recommendations && recommendations.length > 0
        ? `<div style="${styles.recommendationList}">${recommendations.map((rec: string) => `<div style="${styles.recommendationItem}">• ${rec}</div>`).join('')}</div>`
        : `<p style="font-size: 14px; color: #64748b; font-style: italic;">No specific recommendations generated.</p>`;

    const chartsHTML = createEmailCharts(analysis_result);

    return `
        <!DOCTYPE html>
        <html>
        <head>
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
          <style>
            body { ${styles.body} }
            @media only screen and (max-width: 640px) {
                .container { width: 100% !important; margin: 0 !important; }
                .content { padding: 16px !important; }
                .charts { padding: 10px !important; }
                .finding-item { padding: 12px !important; }
            }
          </style>
        </head>
        <body>
            <table width="100%" cellpadding="0" cellspacing="0" border="0" style="background-color: #f8fafc; padding: 20px 0;">
                <tr><td align="center">
                    <table class="container" width="680" cellpadding="0" cellspacing="0" border="0" style="${styles.container}">
                        <tr>
                            <td>
                                <img src="https://qtrypzzcjebvfcihiynt.supabase.co/storage/v1/object/public/base44-prod/public/80f2ab75e_image.png" alt="Weekly Report Header" style="${styles.headerImage}">
                            </td>
                        </tr>
                        <tr>
                            <td class="content" style="${styles.content}">
                                ${greetingHTML}
                                
                                <div style="${styles.metaInfo}">
                                    <strong>📁 Source:</strong> ${company_name}<br>
                                    <strong>📅 Period:</strong> ${report_metadata.reporting_period_start} to ${report_metadata.reporting_period_end}
                                </div>
                                
                                ${fullReportButtonHTML}
                                
                                <div style="${styles.executiveSummary}">
                                    <strong style="font-size: 18px;">🎯 Executive Summary</strong><br><br>
                                    ${report_metadata.humanized_intro}
                                </div>
                                
                                ${analysis_result.business_hours_analysis ? `
                                <h3 style="${styles.sectionTitle}">🕐 Business Hours Impact</h3>
                                <div style="background: #fef2f2; border: 1px solid #fecaca; border-radius: 8px; padding: 20px; margin: 20px 0;">
                                    <p style="color: #dc2626; font-size: 14px; margin-bottom: 16px;">
                                        <strong>Important:</strong> This analysis focuses on events with explicit time stamps and might not include all network events.
                                    </p>
                                    
                                    <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 16px; margin-bottom: 20px;">
                                        <div style="text-align: center;">
                                            <div style="font-size: 24px; font-weight: bold; color: #dc2626;">
                                                ${analysis_result.business_hours_analysis.business_hours_percentage || 0}%
                                            </div>
                                            <div style="font-size: 12px; color: #dc2626;">During Business Hours</div>
                                        </div>
                                        <div style="text-align: center;">
                                            <div style="font-size: 24px; font-weight: bold; color: #dc2626;">
                                                ${analysis_result.business_hours_analysis.business_hours_events || 0}
                                            </div>
                                            <div style="font-size: 12px; color: #dc2626;">Business Hours Events</div>
                                        </div>
                                        <div style="text-align: center;">
                                            <div style="font-size: 24px; font-weight: bold; color: #dc2626;">
                                                ${analysis_result.business_hours_analysis.total_events || 0}
                                            </div>
                                            <div style="font-size: 12px; color: #dc2626;">Total Time Stamped Events</div>
                                        </div>
                                    </div>
                                    
                                    ${analysis_result.business_hours_analysis.business_hours_events_list && 
                                      analysis_result.business_hours_analysis.business_hours_events_list.length > 0 ? `
                                    <div>
                                        <h4 style="font-size: 16px; font-weight: 600; color: #dc2626; margin-bottom: 12px;">Sample Business Hours Events:</h4>
                                        <div style="space-y: 8px;">
                                            ${analysis_result.business_hours_analysis.business_hours_events_list.slice(0, 3).map((event: any) => `
                                                <div style="background: #f9fafb; border: 1px solid #e5e7eb; border-radius: 8px; padding: 12px;">
                                                    <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 4px;">
                                                        <h5 style="font-weight: 500; color: #111827; font-size: 14px;">${event.event_description}</h5>
                                                        <span style="font-size: 12px; color: #6b7280; font-weight: 500;">⏱ ${event.occurrence_time}</span>
                                                    </div>
                                                    <p style="color: #374151; font-size: 12px;">${event.business_impact}</p>
                                                    <div style="display: flex; gap: 16px; font-size: 12px; color: #6b7280; margin-top: 4px;">
                                                        <span>Duration: ${event.duration_minutes} minutes</span>
                                                        <span style="text-transform: capitalize;">${event.severity.replace(/_/g, ' ')}</span>
                                                    </div>
                                                </div>
                                            `).join('')}
                                            ${analysis_result.business_hours_analysis.business_hours_events_list.length > 3 ? `
                                                <div style="text-align: center; font-size: 12px; color: #dc2626; font-weight: 500;">
                                                    + ${analysis_result.business_hours_analysis.business_hours_events_list.length - 3} more business hours events (see full report for complete details)
                                                </div>
                                            ` : ''}
                                        </div>
                                    </div>
                                    ` : ''}
                                </div>
                                ` : ''}
                                
                                ${chartsHTML}
                                
                                ${categories.map(getCategoryHTML).join('')}
                                
                                <h3 style="${styles.sectionTitle}">💡 Recommendations</h3>
                                ${recommendationsHtml}
                            </td>
                        </tr>
                        <tr>
                            <td class="footer" style="${styles.footer}">
                                Generated by NetOp Customer Success Team
                            </td>
                        </tr>
                    </table>
                </td></tr>
            </table>
        </body>
        </html>
    `;
};

// New function for combined reports with multiple URLs
export const generateCombinedEmailBodyText = (insights: any[], recipientName?: string) => {
    let body = "";
    if (recipientName) {
        body += `Hi ${recipientName},\n\nHere are your weekly network analysis reports for multiple sites.\n\n`;
    }

    body += "Combined Network Analysis Report\n";
    body += "================================\n\n";

    // Add quick links section if there are URLs
    const reportsWithUrls = insights.filter(insight => insight.full_report_url);
    if (reportsWithUrls.length > 0) {
        body += "--- FULL REPORT LINKS ---\n";
        reportsWithUrls.forEach(insight => {
            body += `• ${insight.company_name}: ${insight.full_report_url}\n`;
        });
        body += "\n";
    }

    // Add each report
    insights.forEach((insight, index) => {
        if (index > 0) body += "\n" + "=".repeat(50) + "\n\n";
        
        const { company_name, analysis_result } = insight;
        const { report_metadata, categories, recommendations } = analysis_result;
        const { humanized_intro, reporting_period_start, reporting_period_end } = report_metadata;

        body += `REPORT ${index + 1}: ${company_name}\n`;
        body += `Period: ${reporting_period_start} to ${reporting_period_end}\n\n`;

        if (insight.full_report_url) {
            body += `View Full Report: ${insight.full_report_url}\n\n`;
        }

        body += `EXECUTIVE SUMMARY: ${humanized_intro}\n\n`;

        categories.forEach((cat: any) => {
            body += `--- ${cat.category_name.toUpperCase()} ---\n`;
            if (cat.findings.length === 1 && cat.findings[0].summary_line.includes("Stability observed")) {
                body += `✅ ${cat.findings[0].summary_line}\n\n`;
            } else {
                cat.findings.forEach((finding: any) => {
                    body += `• ${finding.summary_line}\n`;
                    body += `  (Severity: ${finding.severity.replace(/_/g, ' ')}, Trend: ${finding.trend.replace(/_/g, ' ')})\n\n`;
                });
            }
        });

        body += "--- RECOMMENDATIONS ---\n";
        if (recommendations && recommendations.length > 0) {
            recommendations.forEach((rec: string) => {
                body += `• ${rec}\n`;
            });
        } else {
            body += "No specific recommendations generated.\n";
        }
        body += "\n";
    });

    body += "\n---\nGenerated by NetOp Customer Success Team";
    return body;
};

export const generateCombinedEmailBodyHTML = (insights: any[], recipientName?: string, categoryVisuals?: any[]) => {
    const styles = {
        body: `font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; background-color: #f8fafc; color: #1e293b; margin: 0; padding: 0;`,
        container: `max-width: 680px; margin: 0 auto; background-color: #ffffff; border-radius: 8px; overflow: hidden; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);`,
        content: `padding: 24px;`,
        reportSeparator: `border-top: 3px solid #e2e8f0; margin: 40px 0 32px 0; padding-top: 32px;`,
        quickLinks: `background-color: #f8fafc; padding: 20px; border-radius: 8px; margin-bottom: 32px;`,
        linkButton: `display: inline-block; background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%); color: #ffffff; padding: 12px 20px; text-decoration: none; border-radius: 6px; font-size: 14px; font-weight: 600; margin: 4px 8px 4px 0; box-shadow: 0 2px 4px rgba(59, 130, 246, 0.2);`,
        executiveSummary: `background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%); border-left: 4px solid #3b82f6; color: #1e3a8a; padding: 16px; margin: 16px 0; border-radius: 0 6px 6px 0;`,
        sectionTitle: `font-size: 18px; font-weight: 600; color: #0f172a; border-bottom: 2px solid #e2e8f0; padding-bottom: 6px; margin: 24px 0 12px 0;`,
        findingItem: `border: 1px solid #e2e8f0; border-radius: 6px; padding: 12px; margin-bottom: 8px; background: #ffffff;`,
        reportHeader: `font-size: 24px; font-weight: 700; color: #0f172a; margin-bottom: 8px;`,
        reportMeta: `color: #64748b; font-size: 14px; margin-bottom: 16px;`,
        footer: `text-align: center; padding: 24px; font-size: 12px; color: #64748b; background-color: #f8fafc; border-top: 1px solid #e2e8f0;`
    };

    const greetingHTML = recipientName 
        ? `<p style="font-size: 16px; color: #374151; margin-bottom: 24px; line-height: 1.6;">Hi ${recipientName},<br><br>Here are your weekly network analysis reports for multiple sites.</p>`
        : '';

    // Quick links section
    const reportsWithUrls = insights.filter(insight => insight.full_report_url);
    const quickLinksHTML = reportsWithUrls.length > 0 ? `
        <div style="${styles.quickLinks}">
            <h3 style="font-size: 16px; font-weight: 600; color: #374151; margin: 0 0 16px 0;">📊 Quick Access to Full Reports</h3>
            <div style="display: flex; flex-wrap: wrap; gap: 8px;">
                ${reportsWithUrls.map(insight => 
                    `<a href="${insight.full_report_url}" target="_blank" style="${styles.linkButton}">${insight.company_name} Report</a>`
                ).join('')}
            </div>
        </div>
    ` : '';

    // Generate individual reports
    const reportsHTML = insights.map((insight, index) => {
        const { company_name, analysis_result } = insight;
        const { report_metadata, categories, recommendations } = analysis_result;

        // Add charts for each individual report
        const chartsHTML = createEmailCharts(analysis_result);

        const getCategoryHTML = (category: any) => {
            // Find the visual for this category (for combined reports, we don't have categoryVisuals parameter)
            // This is a simplified version for combined reports
            const categoryVisualHTML = ''; // Combined reports don't include visuals for now
            
            if (category.findings.length === 1 && category.findings[0].summary_line.includes("Stability observed")) {
                return `
                    <div>
                        <h4 style="font-size: 16px; font-weight: 600; color: #374151; margin: 16px 0 8px 0;">${category.category_name}</h4>
                        <div style="background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%); color: #166534; padding: 12px; border-radius: 6px; border-left: 4px solid #22c55e;">
                            ✅ ${category.findings[0].summary_line}
                        </div>
                        ${categoryVisualHTML}
                    </div>
                `;
            }
            return `
                <div>
                    <h4 style="font-size: 16px; font-weight: 600; color: #374151; margin: 16px 0 8px 0;">${category.category_name}</h4>
                    ${category.findings.map((finding: any) => `
                        <div style="${styles.findingItem}">
                            <p style="margin: 0; line-height: 1.4;">${finding.summary_line}</p>
                        </div>
                    `).join('')}
                    ${categoryVisualHTML}
                </div>
            `;
        };

        const recommendationsHtml = recommendations && recommendations.length > 0
            ? `<ul style="margin: 0; padding-left: 20px;">${recommendations.map((rec: string) => `<li style="margin: 4px 0;">${rec}</li>`).join('')}</ul>`
            : `<p style="font-size: 14px; color: #64748b; font-style: italic; margin: 0;">No specific recommendations generated.</p>`;

        // Individual report button (only if this specific report has a URL)
        const reportButtonHTML = insight.full_report_url ? `
            <div style="text-align: center; margin: 16px 0;">
                <a href="${insight.full_report_url}" target="_blank" style="${styles.linkButton}">📊 View ${company_name} Full Report</a>
            </div>
        ` : '';

        return `
            <div style="${index > 0 ? styles.reportSeparator : ''}">
                <h2 style="${styles.reportHeader}">Report ${index + 1}: ${company_name}</h2>
                <p style="${styles.reportMeta}">
                    Period: ${report_metadata.reporting_period_start} to ${report_metadata.reporting_period_end}
                </p>
                
                ${reportButtonHTML}
                
                <div style="${styles.executiveSummary}">
                    <strong style="font-size: 16px;">🎯 Executive Summary</strong><br><br>
                    ${report_metadata.humanized_intro}
                </div>
                
                ${chartsHTML}
                
                ${categories.map(getCategoryHTML).join('')}
                
                <h4 style="font-size: 16px; font-weight: 600; color: #374151; margin: 24px 0 12px 0;">💡 Recommendations</h4>
                ${recommendationsHtml}
            </div>
        `;
    }).join('');

    return `
        <!DOCTYPE html>
        <html>
        <head>
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
            <style>
                body { ${styles.body} }
                @media only screen and (max-width: 640px) {
                    .container { width: 100% !important; margin: 0 !important; }
                    .content { padding: 16px !important; }
                }
            </style>
        </head>
        <body>
            <table width="100%" cellpadding="0" cellspacing="0" border="0" style="background-color: #f8fafc; padding: 20px 0;">
                <tr><td align="center">
                    <table class="container" width="680" cellpadding="0" cellspacing="0" border="0" style="${styles.container}">
                        <tr>
                            <td>
                                <img src="https://qtrypzzcjebvfcihiynt.supabase.co/storage/v1/object/public/base44-prod/public/80f2ab75e_image.png" alt="Weekly Report Header" style="width: 100%; height: auto; display: block; border-radius: 8px 8px 0 0;">
                            </td>
                        </tr>
                        <tr>
                            <td class="content" style="${styles.content}">
                                ${greetingHTML}
                                ${quickLinksHTML}
                                ${reportsHTML}
                            </td>
                        </tr>
                        <tr>
                            <td class="footer" style="${styles.footer}">
                                Generated by NetOp Customer Success Team
                            </td>
                        </tr>
                    </table>
                </td></tr>
            </table>
        </body>
        </html>
    `;
};
